---
applyTo: '**'
---

User instruction (keep this at the top):

The file `instructions.txt` is a persistent project log and living documentation. Always update this file whenever you (the assistant) make changes to the project codebase, database schema, routes, or architecture. Include a short summary of what changed, why, files edited, and any steps needed to verify the change. Keep entries chronological with timestamps. Always keep this header at the top.

---

Project snapshot (initial seed) — 2025-10-30

Summary
- Repo root: ScheduleSync
- Frontend: React + TypeScript + Vite (frontend/)
- Backend: Node + Express + TypeScript + Mongoose (api/)
- Purpose: ScheduleSync / ScheduleComparer — personal calendar + friend sharing + demo seeding

Database schema (core models)
- User (api/src/models/User.ts)
  - _id: ObjectId
  - email: string (unique)
  - name: string
  - passwordHash: string
  - friends: ObjectId[] (refs to User)
  - admin: boolean

- Event (api/src/models/Event.ts)
  - _id: ObjectId
  - userId: ObjectId (ref -> User)  // required
  - title: string
  - description?: string
  - start: Date
  - end: Date
  - timestamps: createdAt, updatedAt
  - unique index: { userId, start, end, title } to avoid exact duplicates

API routes (current, key endpoints)
- /auth
  - POST /register
  - POST /login
  - POST /register-admin (guarded by env allow flag)
  - GET /me (added) — returns { user }

- /events (protected; requires Bearer token)
  - GET /events?ownerId=...  (returns events; ownerId optional)
  - POST /events  (create event; server sets userId from token)
  - PUT /events/:id (update event if userId matches)
  - DELETE /events/:id (delete event if userId matches)

- /friends (protected)
  - existing endpoints used by frontend: GET /friends, GET /friends/:id/busy-now, POST /friends/add, etc.

- /seed (protected; many admin/client seed helpers)
  - POST /seed/my-week  { clear?: boolean, perDayMax?: number }  — (now clamps perDayMax <= 5)
  - POST /seed/my-month { clear?: boolean, perDayMax?: number }
  - POST /seed/all      { clear?: boolean, perDayMax?: number } (admin only)
  - POST /seed/reset-sample { domain, emails } (admin only) — remove sample users/events
  - POST /seed/full-week-user { userId, startHour, endHour, clear } (admin only)
  - POST /seed/dedupe    (admin only) — remove duplicate events

Recent changes applied (as of this snapshot)
- Added dark calendar UI and React Query wiring in frontend (multiple files under frontend/src)
- Installed calendar packages: react-big-calendar, date-fns, @tanstack/react-query, and dev types where needed
- Added /auth/me endpoint (api/src/routes/auth.ts) so frontend can fetch current user after login
- Standardized Event model field usage to `userId` across backend routes (api/src/routes/events.ts, api/src/routes/seed.ts)
- Replaced corrupted seed route with a clean `api/src/routes/seed.ts` that implements: my-week, my-month, all, reset-sample, full-week-user, dedupe. Also clamps my-week perDayMax to 5.
- Fixed frontend API wrapper call uses (api.del vs api.delete mismatch) in frontend/src/App.tsx

How I verify changes
- Run backend dev server: cd api && npm run dev (ensure DB connection env vars configured)
- Run frontend dev server: cd frontend && npm run dev
- Use Python seeder script api/src/seed_data.py to exercise admin flows (it calls register-admin, register, login, /seed/reset-sample, /seed/full-week-user, /seed/all, /seed/dedupe)
- Use UI to login and press Seed My Week to confirm 5 events/day cap

Notes & conventions
- Auth: endpoints expect Bearer token in Authorization header. Middleware populates req.userId from JWT sub.
- All event queries and writes must be scoped to `userId` to prevent cross-user modifications.
- Admin checks: endpoints that change many users' data (reset-sample, full-week-user, all, dedupe) must verify user.admin === true.
- Idempotency: `X-Seed-Req` header is accepted and used by /seed endpoints to avoid accidental duplicate runs (in-memory TTL map used for dev).

Next steps (recommended)
- (optional) Add integration tests for seed endpoints to assert per-day caps and dedupe behavior.
- (optional) Add an audit log collection for destructive seed/admin operations (who, when, what) if needed for repeatable demos.

Change log (append-only)
- 2025-10-30  — Created file and recorded initial snapshot. Implemented seed endpoint fixes and admin seed helpers.

- 2025-10-30 23:46 UTC — Added automated busy-test and made Busy Person busy all day
  - Files edited:
    - `api/src/test_busy.py` — added a non-interactive test script that ensures admin and Busy Person exist, creates a timezone-aware event overlapping current local time, and calls `GET /friends/:id/busy-now` to validate busy detection. The test prints the created event and the busy check result.
    - `api/src/seed_data.py` — changed `BUSY_START_HOUR` to `0` and `BUSY_END_HOUR` to `24` so the Busy Person is seeded as busy for the whole day when running the Python seeder.
  - Why:
    - The Busy Person created by the seeder was sometimes not flagged busy at arbitrary test times due to hour ranges; making them busy all day ensures the demo and automated checks reliably detect them as busy.
  - How I verified:
    1. Ran `python src/test_busy.py` while the backend dev server was running.
    2. Observed the script create an explicit timezone-aware event covering "now" and the `/friends/:id/busy-now` endpoint returned `{'busy': True}`.
  - How to reproduce locally:
    - Start the backend dev server:

      ```powershell
      cd api; npm run dev
      ```

    - Run the seeder (this will recreate demo users and make the Busy Person busy all day):

      ```powershell
      cd api; python .\src\seed_data.py
      ```

    - Or run the focused test I added (non-interactive):

      ```powershell
      cd api; python .\src\test_busy.py
      ```

  - Notes:
    - `BUSY_START_HOUR=0` and `BUSY_END_HOUR=24` ensure the busy-blocking covers the full 24 hours; the server stores times in UTC so local timezone conversions are applied when creating events. If you want a narrower busy window later, change the constants back.
    - I did not commit these changes to git — tell me if you'd like me to prepare a commit message and run git commands.

- 2025-10-30 23:58 UTC — Seeder: create immediate "now" event for Busy Person
  - Files edited:
    - `api/src/seed_data.py` — when Busy Person is created, the seeder now also creates a timezone-aware event that overlaps current local time (start = now-15m, end = now+2h) using the Busy Person's token. This ensures `/friends/:id/busy-now` returns true immediately after seeding.
  - Why:
    - Some environments/time conversions meant the Busy Person's hour-range events could miss the exact current instant; adding an explicit "now" event guarantees busy detection during demos and automated checks.
  - How to verify:
    - Start backend dev server and run the seeder (`python .\src\seed_data.py`) or run the focused test (`python .\src\test_busy.py`). Confirm that `/friends/:id/busy-now` returns `{'busy': True}` for the Busy Person.

- 2025-10-30 23:59 UTC — Seeder: verify busy-now after creating immediate event
  - Files edited:
    - `api/src/seed_data.py` — after creating the immediate busy event for Busy Person, the seeder now issues a `GET /friends/:id/busy-now` request (as admin) and verifies the response contains `busy: true`. If not, the seeder raises an error and exits so failures are visible during seeding.
  - Why:
    - Automatically verifying busy detection during seeding provides immediate feedback if timezone handling, event creation, or busy calculation logic regressed.
  - Notes:
    - The seeder will now fail with an error if busy verification does not succeed. This is intentional for CI/demo reliability. If you'd prefer a non-fatal warning instead, I can change the behavior.

- 2025-10-31 00:10 UTC — Seeder: ensure final immediate busy event persists after global seeding
  - Files edited:
    - `api/src/seed_data.py` — moved creation/verification of the immediate "now" event for Busy Person to the end of the seeding flow (after `/seed/all` and `/seed/dedupe`). Previously the immediate event was deleted by the global `/seed/all` clear step; moving it to the end ensures the Busy Person remains busy when seeding finishes.
  - Why:
    - The seeder previously created an immediate busy event early in the flow but then called `/seed/all` with clear=True which removed week-range events for all users (including Busy Person), so the marker disappeared. This fix recreates the marker after those destructive steps.
  - How I verified:
    - Ran `echo YES | python .\src\seed_data.py` and observed the final busy-now check returns `{'busy': True}` and the user's events list includes the final immediate busy event.

---

Developer note: from now on, every time I make a change to the repository that affects routes, models, or behavior, I will append a timestamped note to this file describing the change, the files edited, and any verification steps.

- 2025-10-30 00:15 UTC — Backend: documentation update (schema, routes, files changed)
  - Summary of backend changes since previous snapshot:
    - Standardized Event ownership field to `userId` across routes and seeders.
    - Protected seed endpoints with authentication and admin checks where applicable.
    - Replaced corrupted/fragile seed implementation with a clean, idempotent-friendly set of seed helpers and fixed ordering so demo markers persist.
    - Added runtime seeder verification: seeder creates a timezone-aware immediate "now" event for Busy Person at the end of the flow and verifies `/friends/:id/busy-now` returns `busy: true`.
    - Added small dev/test utilities to exercise and debug the busy detection and events listing.

  - Files edited or added (backend):
    - `api/src/routes/seed.ts` — Rewrote/cleaned seed routes. Implemented endpoints:
      - `POST /seed/my-week` — generate random events for the authenticated user (hard cap per-day = 5 for client-facing endpoint), idempotency key support via `X-Seed-Req`, optional `clear`/`perDayMax` params, top-up logic to avoid duplicates.
      - `POST /seed/my-month` — month-based variant.
      - `POST /seed/all` — admin-only bulk seed for all users (clear option, perDayMax, includeAdmin flag).
      - `POST /seed/reset-sample` — admin-only destructive reset of demo users (by domain/emails) and their events; also pulls them out of friends arrays.
      - `POST /seed/full-week-user` — admin-only helper to create busy-blocks for a single user for the week (uses `startHour`/`endHour`, `clear` option).
      - `POST /seed/dedupe` — admin-only dedupe routine to remove exact duplicate events (same userId + start + end + title).

    - `api/src/routes/events.ts` — Updated event CRUD handlers to use `AuthedRequest` and enforce `userId` scoping for reads/writes/updates/deletes so users cannot affect other users' events. Also fixed usages that previously referenced `owner`/`ownerId`.

    - `api/src/routes/auth.ts` — Added `GET /auth/me` (protected) to return the currently-authenticated user object; small fixes to ensure returned `id` is stringified consistently for frontend use.

    - `api/src/routes/friends.ts` — Kept core friend endpoints; added/verified `GET /friends/:id/busy-now` implementation that checks for an overlapping event (start <= now < end) for the friend id and returns `{ busy: boolean }`.

    - `api/src/models/Event.ts` — Event schema enforced `userId: ObjectId` required and includes a unique index `{ userId, start, end, title }` to avoid exact duplicates. Seed/routes updated to match this shape.

    - `api/src/seed_data.py` — Replaced and iteratively hardened Python seeder used by demos/automation:
      - Uses `register-admin`, `register`, `login`, `reset-sample`, `full-week-user`, `all`, `dedupe` flows.
      - Changed Busy Person seed to use `BUSY_START_HOUR = 0` and `BUSY_END_HOUR = 24` (full-day busy) and to create a final immediate timezone-aware busy event AFTER the global `/seed/all` and `/seed/dedupe` steps so it does not get deleted by the bulk clear.
      - Adds verification of busy detection via admin-side `GET /friends/:id/busy-now` and raises if verification fails (useful for CI/demo reliability).
      - Still prompts for interactive confirmation; can be run non-interactively by piping `YES` or we can add a `--yes` flag on request.

    - `api/src/test_busy.py` — New focused test script (non-interactive) that ensures admin/busy user exist, creates an explicit timezone-aware event overlapping now for the Busy Person (using that user's token), and calls `/friends/:id/busy-now` as admin to ensure the busy detection works.

    - `api/src/debug_list_events.py` — New debug helper that logs in as admin, looks up Busy Person by email (via `/friends` or `/users`), fetches `GET /events?ownerId=<id>` and `/friends/:id/busy-now` to aid troubleshooting when events are not visible in the frontend.

  - Design & behavioral notes:
    - Seed endpoints are protected by `requireAuth`. Admin-only endpoints check `user.admin === true` (e.g., `/seed/all`, `/seed/reset-sample`, `/seed/dedupe`, `/seed/full-week-user`).
    - The client-facing `POST /seed/my-week` clamps `perDayMax` to a maximum of 5 to prevent accidental huge inserts via the UI.
    - Idempotency support: `X-Seed-Req` header is accepted by seed routes and a short-lived in-memory TTL map is used to make short repeated requests idempotent during development/testing.
    - Time handling: server stores event times in UTC (ISO); seeder/test scripts create timezone-aware ISO strings using local timezone to ensure busy markers align with local 'now'. The `friends/:id/busy-now` check compares server-time `new Date()` to stored UTC ranges.

  - How to verify (quick checklist):
    1. Start the backend dev server:

       ```powershell
       cd api
       npm run dev
       ```

    2. Run the seeder (interactive) or non-interactively:

       ```powershell
       cd api
       python .\src\seed_data.py        # interactive
       echo YES | python .\src\seed_data.py  # non-interactive
       ```

    3. After seeding, verify Busy Person is busy now (admin):

       ```powershell
       python .\src\debug_list_events.py
       # or to run the focused test that also creates a transient event:
       python .\src\test_busy.py
       ```

    4. Optionally inspect events via the API (admin token) or login as Busy Person in the frontend to see events in the calendar.

  - Files to review for developers (where to look for implementation):
    - `api/src/routes/seed.ts`
    - `api/src/routes/events.ts`
    - `api/src/routes/auth.ts`
    - `api/src/routes/friends.ts`
    - `api/src/models/Event.ts`
    - `api/src/seed_data.py` (Python seeder)
    - `api/src/test_busy.py`, `api/src/debug_list_events.py` (dev helpers)

  - Suggested follow-ups (optional):
    - Add a `--yes` CLI flag to `seed_data.py` for scripted CI runs.
    - Make the final immediate busy event idempotent or automatically cleaned up after verification if you prefer a pristine DB.
    - Add integration tests that run the seeder against a disposable test DB and assert `busy-now` behavior.

- 2025-10-31  — Frontend: documentation and mapping to backend
  - Summary:
    - Frontend app lives in `frontend/` and is a React + TypeScript + Vite single-page app.
    - Key UI pieces: calendar (react-big-calendar + DnD), login/register modal, friend list & busy indicators, add-friend form, seeding buttons for demo data.
    - Styling: `frontend/src/App.css` plus `rbc-dark.css` provide the dark theme and react-big-calendar fixes.

  - Files of interest (frontend):
    - `frontend/src/App.tsx` — main application. Responsible for:
      - App state: `me`, `friends`, `events`, `busy` map, `enabledFriends`, `ownerColor`, calendar view/date state.
      - Auto-login on token (reads `localStorage.ss_token`, calls `apiSetToken`), runs `initAfterLogin()` which loads user data and events.
      - `loadMyEvents()` calls `GET /events` and maps returned events into local shape (uses `_id` -> `id`, `start`/`end` -> Date objects). Note: frontend uses a sentinel `ownerId: "me"` for user's own events.
      - `loadFriends()` calls `GET /friends` and assigns colors from `FRIEND_COLORS` into `ownerColor`.
      - `loadFriendEvents(fid, enable)` calls `GET /events?ownerId=<fid>` to fetch a friend's events and merges them into `events` state (ownerId is set to the friend's id in the mapped events).
      - Busy polling: an effect iterates through `friends` and periodically (every 15s) calls `GET /friends/:id/busy-now` to populate the `busy` map used by the sidebar UI.
      - Event CRUD wiring: `POST /events` (create), `PUT /events/:id` (update), `DELETE /events/:id` (delete). When creating/updating/deleting the app updates local `events` state and calls the backend when `me` is present.
      - Seeding UI actions: `seedMyWeek()` -> `POST /seed/my-week`, `seedMyMonth()` -> `POST /seed/my-month`, `seedAllPeople(mode)` -> `POST /seed/all` (admin). After seeding the UI reloads events/friends as needed.
      - Drag & drop / resize: uses react-big-calendar's DnD wrappers; handlers call `PUT /events/:id` for persisted changes when the event belongs to the signed-in user.
      - Login/registration: `onAuthed()` receives `AuthResult` from `LoginModal`, stores token via `apiSetToken`, sets `me` and calls `initAfterLogin()`.

    - `frontend/src/App.css` — global/dark theme + react-big-calendar specific tweaks (colors, now-indicator color, overlays, month/week/day surfaces). This file contains the friend list styles (busy-dot, friend-row), modal styles, and overrides for `.rbc-*` classes.

    - `frontend/src/LoginModal.tsx` — login/register modal. Posts to `/auth/login` or `/auth/register` via `api.post` and calls `setToken`/`onAuthed` on success. Expects server to return `{ token, user }`.

    - `frontend/src/AddFriendForm.tsx` — small form that posts `POST /friends/add` with `{ email }`. Calls `onAdded()` after success (UI refresh).

    - `frontend/src/api.ts` (present in repo) — API wrapper used by frontend. Responsibilities:
      - setToken / apiSetToken helpers to store/remove token and set Authorization header for subsequent calls.
      - convenience methods `get`, `post`, `put`, `del` used throughout `App.tsx` and components. Ensure this wrapper returns parsed JSON and throws on non-200s so components can surface errors.

    - `frontend/src/main.tsx` — bootstraps React and renders `App` inside the DOM root; applies global CSS including `rbc-dark.css`.

  - Frontend → Backend mapping (summary of endpoints used by UI):
    - Authentication
      - POST `/auth/login` — Login (LoginModal)
      - POST `/auth/register` — Register (LoginModal)
      - GET `/auth/me` — Fetch current user on app startup (App.initAfterLogin -> `loadMe`)

    - Events
      - GET `/events` — Used by `loadMyEvents()` to get the signed-in user's events.
      - GET `/events?ownerId=<friendId>` — Used by `loadFriendEvents()` to load events for a friend into the calendar.
      - POST `/events` — Create event (used when user creates an event via calendar slot selection).
      - PUT `/events/:id` — Update event (drag/resize/inline edit flow for user's events).
      - DELETE `/events/:id` — Delete event (via popup in UI).

    - Friends
      - GET `/friends` — Load friend list (used by `loadFriends()`; populates sidebar list and `enabledFriends`).
      - GET `/friends/:id/busy-now` — Busy check (polled every 15s by the UI; result is `{ busy: boolean }`).
      - POST `/friends/add` — Add a friend by email (AddFriendForm).

    - Seed/demo
      - POST `/seed/my-week`, `/seed/my-month` — client-facing seeding actions triggered by UI buttons (confirmations shown). These endpoints are implemented in `api/src/routes/seed.ts` and the frontend calls them and then reloads events.
      - POST `/seed/all` — admin seed action (UI calls via `seedAllPeople`) and then refreshes UI.

  - Data shapes & notes (frontend expectations)
    - Event objects returned by backend must include `_id`, `title`, `start`, `end`, `description?`, and `userId`.
      - The frontend maps `_id` -> `id` and converts `start`/`end` to JS Date objects before adding to the calendar.
      - For the user's own events App uses `ownerId: "me"` so they render with the personal color; friend events use the friend's `_id` as the `ownerId` for color/keying.
    - Friend objects returned by `GET /friends` should include `_id`, `name`, `email`.
    - Auth result expected shape: `{ token: string, user: { id, email, name, admin? } }`.

  - UX behaviors to be aware of
    - When not logged in the app shows a single sample event in `events` state so the calendar isn't empty.
    - Seeding actions prompt for confirmation in the UI. After seeding the app reloads relevant events (my events and any enabled friend events).
    - The busy indicator in the sidebar is updated via periodic polling; the frequency is currently 15s. Consider debouncing or server push (WebSocket) for scale.

  - How to verify frontend ↔ backend quickly
    1. Start backend dev server (api):

       ```powershell
       cd api; npm run dev
       ```

    2. Start frontend dev server (frontend):

       ```powershell
       cd frontend; npm run dev
       ```

    3. Open the app in the browser. If you have a demo admin account seeded, login via the modal. Otherwise run the Python seeder to create demo users/events:

       ```powershell
       cd api; echo YES | python .\src\seed_data.py
       ```

    4. After login the app should automatically fetch `/auth/me`, `/events`, and `/friends`. Use the browser network inspector to confirm the following requests succeed and return expected shapes:
       - `GET /auth/me` -> `{ user }`
       - `GET /events` -> `[{ _id, userId, title, start, end, ... }]`
       - `GET /friends` -> `{ friends: [ { _id, name, email } ] }`
       - `GET /friends/:id/busy-now` -> `{ busy: boolean }` (polled every 15s)

    5. Click the seed buttons in the UI (Seed My Week / Seed My Month). Confirm `POST /seed/my-week`/`POST /seed/my-month` was called and then `GET /events` updated the calendar.

  - Files to review (frontend):
    - `frontend/src/App.tsx` — primary app logic, event mapping, polling, seeding UI handlers.
    - `frontend/src/LoginModal.tsx` — login/register flow.
    - `frontend/src/AddFriendForm.tsx` — friend addition UI.
    - `frontend/src/api.ts` — API wrapper (token handling and HTTP helpers).
    - `frontend/src/App.css` and `frontend/src/rbc-dark.css` — styling and calendar theme fixes.

  - Suggested frontend follow-ups (optional):
    - Add explicit TypeScript types for API responses (EventDTO, UserDTO, FriendDTO) and use them across the frontend so mapping mistakes are caught at compile time.
    - Show better error UI when network calls fail (toasts or inline messages) instead of console-only errors.
    - Reduce busy polling frequency or replace with a server push mechanism for scalability/testing (WebSocket/Socket.IO or server-sent events).
    - Make the `enabledFriends` default deterministic (persist in localStorage) so users see the same friend toggles across reloads.

  - How this ties to backend expectations (recap):
    - The frontend expects the backend to expose the authentication endpoints (`/auth/*`), event CRUD (`/events*`), friends endpoints (`/friends*`) and the seed endpoints used for demos. The backend changes already implemented (see backend section above) provide these endpoints and the event/user shapes the frontend expects.

  - Verification note:
    - If you see events in the backend (via `debug_list_events.py` or direct DB inspection) but the frontend doesn't render them, check that the backend returns events with ISO `start`/`end` strings (not nested objects) and that the frontend is converting those strings into `Date` objects. Also confirm `ownerId`/`userId` mismatch: frontend expects `user` events via `GET /events` (no ownerId) and friend events via `GET /events?ownerId=<id>`.

---

Update complete: frontend docs appended and mapped to backend routes. Run the verification checklist above to confirm end-to-end behavior.

- 2025-10-31 02:10 UTC — Frontend: remove sample event after login
  - Files edited:
    - `frontend/src/App.tsx` — updated `initAfterLogin()` to call `setEvents([])` before loading server data. This clears the in-memory sample event that the app shows to anonymous users so it no longer persists after a user logs in.
  - Why:
    - Previously the sample event was added on first load when no token existed and it could remain in the `events` state after the user logged in because `loadMyEvents()` only replaces events with `ownerId === "me"`. Clearing `events` before fetching server-side events ensures the demo sample doesn't remain visible or block edits.
  - How to verify:
    1. Start backend and frontend dev servers.
    2. Open the app in a new incognito window (no token) — you should see the sample event.
    3. Login via the modal. After successful login the sample event should disappear and your real events (from `GET /events`) should load.
  - Notes:
    - This change clears the entire `events` state briefly on login; since we immediately reload server events and friend events, the UI will repopulate. If you prefer a more surgical removal (only remove events without `ownerId`), I can implement that instead.
